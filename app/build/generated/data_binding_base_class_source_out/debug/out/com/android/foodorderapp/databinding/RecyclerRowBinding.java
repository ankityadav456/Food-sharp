// Generated by view binder compiler. Do not edit!
package com.android.foodorderapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.android.foodorderapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RecyclerRowBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView cardView;

  @NonNull
  public final TextView restaurantAddress;

  @NonNull
  public final TextView restaurantHours;

  @NonNull
  public final TextView restaurantName;

  @NonNull
  public final TextView restaurantName2;

  @NonNull
  public final TextView restaurantName3;

  @NonNull
  public final ImageView thumbImage;

  private RecyclerRowBinding(@NonNull ConstraintLayout rootView, @NonNull CardView cardView,
      @NonNull TextView restaurantAddress, @NonNull TextView restaurantHours,
      @NonNull TextView restaurantName, @NonNull TextView restaurantName2,
      @NonNull TextView restaurantName3, @NonNull ImageView thumbImage) {
    this.rootView = rootView;
    this.cardView = cardView;
    this.restaurantAddress = restaurantAddress;
    this.restaurantHours = restaurantHours;
    this.restaurantName = restaurantName;
    this.restaurantName2 = restaurantName2;
    this.restaurantName3 = restaurantName3;
    this.thumbImage = thumbImage;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RecyclerRowBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RecyclerRowBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.recycler_row, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RecyclerRowBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cardView;
      CardView cardView = ViewBindings.findChildViewById(rootView, id);
      if (cardView == null) {
        break missingId;
      }

      id = R.id.restaurantAddress;
      TextView restaurantAddress = ViewBindings.findChildViewById(rootView, id);
      if (restaurantAddress == null) {
        break missingId;
      }

      id = R.id.restaurantHours;
      TextView restaurantHours = ViewBindings.findChildViewById(rootView, id);
      if (restaurantHours == null) {
        break missingId;
      }

      id = R.id.restaurantName;
      TextView restaurantName = ViewBindings.findChildViewById(rootView, id);
      if (restaurantName == null) {
        break missingId;
      }

      id = R.id.restaurantName2;
      TextView restaurantName2 = ViewBindings.findChildViewById(rootView, id);
      if (restaurantName2 == null) {
        break missingId;
      }

      id = R.id.restaurantName3;
      TextView restaurantName3 = ViewBindings.findChildViewById(rootView, id);
      if (restaurantName3 == null) {
        break missingId;
      }

      id = R.id.thumbImage;
      ImageView thumbImage = ViewBindings.findChildViewById(rootView, id);
      if (thumbImage == null) {
        break missingId;
      }

      return new RecyclerRowBinding((ConstraintLayout) rootView, cardView, restaurantAddress,
          restaurantHours, restaurantName, restaurantName2, restaurantName3, thumbImage);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
